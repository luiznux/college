
int *p; ponteiro que aponta para um endereço de memoria

int a = 16; valor que a variavel "a" recebe e é armazenado em seu endereço de memoria

&a; --> endereço de memoria da variavel "a"

p = &a;  --> p  acessa o endereço de memoria

cout << p*; -->vai retornar o valor de a, que é apontado por p

*p = 5; modifiquei o valor de "a" atravez do ponteiro

===========================================================================

//Declaração de uma função
função(int &x){};

obs: quando passo (int &x) como parametro, quer dizer que estou fazendo uma
passagem por referencia do endereço de uma variavel:

//chamada da função
função(*p);

//ou

int a;
função(&a)

por isso devo dar como argumento um ponteiro que aponte para o endereço de memoria de uma variavel do tipo inteiro ou passo diretamente um endereço de
uma variavel que ja declarei

as alterações dessa variavel dentro da função, serao guardadas no endereço da mesma, assim consigo acessar diretamente a variavel que foi passada.
===========================================================================

No caso de um vetor, nao é necessario atribuir um ponteiro, por exemplo:

int vetor[5] = {1,2,3,4,5};

nesse caso nao preciso do "&" pois o proprio vetor ja é um endereço de  me-
moria
===========================================================================
